/**
 */
package us.coastalhacking.semiotics.model.flow.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import us.coastalhacking.semiotics.model.flow.util.FlowAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FlowItemProviderAdapterFactory extends FlowAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FlowItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.flow.Flow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowItemProvider flowItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.flow.Flow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowAdapter() {
		if (flowItemProvider == null) {
			flowItemProvider = new FlowItemProvider(this);
		}

		return flowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.flow.FlowSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowSourceItemProvider flowSourceItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.flow.FlowSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowSourceAdapter() {
		if (flowSourceItemProvider == null) {
			flowSourceItemProvider = new FlowSourceItemProvider(this);
		}

		return flowSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.flow.FlowSink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowSinkItemProvider flowSinkItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.flow.FlowSink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowSinkAdapter() {
		if (flowSinkItemProvider == null) {
			flowSinkItemProvider = new FlowSinkItemProvider(this);
		}

		return flowSinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.flow.FlowGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowGroupItemProvider flowGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.flow.FlowGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowGroupAdapter() {
		if (flowGroupItemProvider == null) {
			flowGroupItemProvider = new FlowGroupItemProvider(this);
		}

		return flowGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.flow.DataFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFlowItemProvider dataFlowItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.flow.DataFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFlowAdapter() {
		if (dataFlowItemProvider == null) {
			dataFlowItemProvider = new DataFlowItemProvider(this);
		}

		return dataFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.flow.DataFlowSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFlowSourceItemProvider dataFlowSourceItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.flow.DataFlowSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFlowSourceAdapter() {
		if (dataFlowSourceItemProvider == null) {
			dataFlowSourceItemProvider = new DataFlowSourceItemProvider(this);
		}

		return dataFlowSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.flow.DataFlowSink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFlowSinkItemProvider dataFlowSinkItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.flow.DataFlowSink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFlowSinkAdapter() {
		if (dataFlowSinkItemProvider == null) {
			dataFlowSinkItemProvider = new DataFlowSinkItemProvider(this);
		}

		return dataFlowSinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.flow.FlowConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowConstraintItemProvider flowConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.flow.FlowConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowConstraintAdapter() {
		if (flowConstraintItemProvider == null) {
			flowConstraintItemProvider = new FlowConstraintItemProvider(this);
		}

		return flowConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.flow.EndsWith} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndsWithItemProvider endsWithItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.flow.EndsWith}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndsWithAdapter() {
		if (endsWithItemProvider == null) {
			endsWithItemProvider = new EndsWithItemProvider(this);
		}

		return endsWithItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.flow.StartsWith} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartsWithItemProvider startsWithItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.flow.StartsWith}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartsWithAdapter() {
		if (startsWithItemProvider == null) {
			startsWithItemProvider = new StartsWithItemProvider(this);
		}

		return startsWithItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.flow.Matches} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchesItemProvider matchesItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.flow.Matches}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchesAdapter() {
		if (matchesItemProvider == null) {
			matchesItemProvider = new MatchesItemProvider(this);
		}

		return matchesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.flow.Contains} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainsItemProvider containsItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.flow.Contains}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainsAdapter() {
		if (containsItemProvider == null) {
			containsItemProvider = new ContainsItemProvider(this);
		}

		return containsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.flow.CastedTo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CastedToItemProvider castedToItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.flow.CastedTo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCastedToAdapter() {
		if (castedToItemProvider == null) {
			castedToItemProvider = new CastedToItemProvider(this);
		}

		return castedToItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.flow.ControlFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowItemProvider controlFlowItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.flow.ControlFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowAdapter() {
		if (controlFlowItemProvider == null) {
			controlFlowItemProvider = new ControlFlowItemProvider(this);
		}

		return controlFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.flow.ControlFlowSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowSourceItemProvider controlFlowSourceItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.flow.ControlFlowSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowSourceAdapter() {
		if (controlFlowSourceItemProvider == null) {
			controlFlowSourceItemProvider = new ControlFlowSourceItemProvider(this);
		}

		return controlFlowSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.flow.ControlFlowSink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowSinkItemProvider controlFlowSinkItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.flow.ControlFlowSink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowSinkAdapter() {
		if (controlFlowSinkItemProvider == null) {
			controlFlowSinkItemProvider = new ControlFlowSinkItemProvider(this);
		}

		return controlFlowSinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (flowItemProvider != null) flowItemProvider.dispose();
		if (flowSourceItemProvider != null) flowSourceItemProvider.dispose();
		if (flowSinkItemProvider != null) flowSinkItemProvider.dispose();
		if (flowGroupItemProvider != null) flowGroupItemProvider.dispose();
		if (dataFlowItemProvider != null) dataFlowItemProvider.dispose();
		if (dataFlowSourceItemProvider != null) dataFlowSourceItemProvider.dispose();
		if (dataFlowSinkItemProvider != null) dataFlowSinkItemProvider.dispose();
		if (flowConstraintItemProvider != null) flowConstraintItemProvider.dispose();
		if (endsWithItemProvider != null) endsWithItemProvider.dispose();
		if (startsWithItemProvider != null) startsWithItemProvider.dispose();
		if (matchesItemProvider != null) matchesItemProvider.dispose();
		if (containsItemProvider != null) containsItemProvider.dispose();
		if (castedToItemProvider != null) castedToItemProvider.dispose();
		if (controlFlowItemProvider != null) controlFlowItemProvider.dispose();
		if (controlFlowSourceItemProvider != null) controlFlowSourceItemProvider.dispose();
		if (controlFlowSinkItemProvider != null) controlFlowSinkItemProvider.dispose();
	}

}
