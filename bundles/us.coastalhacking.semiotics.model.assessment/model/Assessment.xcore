@GenModel(editDirectory="/us.coastalhacking.semiotics.model.assessment.edit/src-gen",
	forceOverwrite="true", copyrightText="Copyright (c) 2016 Coastal Hacking\nAll rights reserved. This program and the accompanying materials\nare made available under the terms of the Eclipse Public License\nv1.0 which accompanies this distribution, and is available at\nhttp://www.eclipse.org/legal/epl-v10.html")
package us.coastalhacking.semiotics.model.assessment

// BASE

/**
 * Something that can be identified or named
 */
interface Nameable
{
	String name
}

/**
 * Something that can be described
 */
interface Describable
{
    @GenModel(propertyMultiLine="true") String description
}

/**
 * Something suitable for further review, examination, or analysis
 */
interface Examinable extends Nameable
{
	/**
	 * Evidence identifying why this element should be reviewed
	 */
	refers Provable[] evidence opposite examinees

	/**
	 * Traces identifying attributes or information related to this element 
	 */
	refers Traceable[] traces opposite examinees
	
	/**
	 * Searches related to this element
	 */
	refers Searchable[] searches opposite examinees
	
	/**
	 * Tasks related to this element
	 */
	refers Taskable[] tasks opposite examinees
	
	/** 
	 * Reports related to this element
	 */
	refers Findable[] findings opposite examinees
}

/**
 * Something factual or objective in nature
 */
interface Provable extends Nameable
{
	refers Examinable[] examinees opposite evidence
	refers Traceable[] traces opposite evidence
}

/**
 * Something that associates, connects, or relates evidence to examinees
 */
interface Traceable extends Nameable
{
	refers Provable[] evidence opposite traces
	refers Examinable[] examinees opposite traces
}

/** 
 * Something that can be searched
 */
interface Searchable extends Nameable
{
	refers Examinable examinees opposite searches
}

/**
 * Something that can be tasked
 */
interface Taskable extends Nameable
{
    refers Examinable[] examinees opposite tasks
}

/**
 * Something that can be reported upon
 */
interface Findable extends Nameable
{
    refers Examinable[] examinees opposite findings
}

/**
 * An element type that can be a group or member of a group
 */
interface Groupable
{
}

/**
 * A groupable element type that is also a member
 */
interface Membered extends Groupable
{
}

/**
 * An element which contains other elements
 */
interface Group<T extends Groupable> extends Nameable
{
    contains Member<T>[] members opposite group
}


/**
 * An element contained in a group
 */
interface Member<T extends Groupable> extends Nameable
{
    container Group<T> group opposite members
}

/** 
 * An element primarily identifying as a group that is also a member of some other group 
 */
interface GroupableMembered<G extends Groupable, M extends Membered> extends Group<G>, Member<M>
{
}

/** 
 * An element primarily identifying as a member, of some group, that also contains sub-groups 
 */

interface MemberedGroupable<G extends Groupable, M extends Membered> extends Member<G>, Group<M>
{
}


// CONTROL
interface ControlType extends Groupable
{
}

interface ControlGroup<T extends ControlType> extends GroupableMembered<T, Applicational>
{
}

interface Control<T extends ControlType> extends Member<T>, Examinable, Describable
{
	refers CWE[] cwes opposite controls
}

class CWEGroup
{
	contains CWE[] cwes opposite cweGroup
}

class CWE
{
	container CWEGroup cweGroup opposite cwes
	int ^id
	String title
	String url
	refers Control<? extends ControlType>[] controls opposite cwes
}

interface AuthenticationControlType extends ControlType
{
}

class AuthenticationGroup extends ControlGroup<AuthenticationControlType>
{
}

class Authentication extends Control<AuthenticationControlType>
{
}

interface AuthorizationControlType extends ControlType
{
}

class AuthorizationGroup extends ControlGroup<AuthorizationControlType>
{
}

class Authorization extends Control<AuthorizationControlType>
{
}

interface AccountControlType extends ControlType
{
}

class AccountGroup extends ControlGroup<AccountControlType>
{
}

class Account extends Control<AccountControlType>
{
    String username
    String password
}

interface CryptographyControlType extends ControlType
{
}

class CryptographyGroup extends ControlGroup<CryptographyControlType>
{
}

class Cryptography extends Control<CryptographyControlType>
{
}

interface OutputEncodingControlType extends ControlType
{
}

class OutputEncodingGroup extends ControlGroup<OutputEncodingControlType>
{
}

class OutputEncoding extends Control<OutputEncodingControlType>
{
}

interface GenericControlType extends ControlType
{
}

class GenericControl extends Control<GenericControlType>
{
}

class GenericControlGroup extends ControlGroup<GenericControlType>
{
}

// SURFACE AREA
interface SurfaceAreaType extends Groupable
{
}

interface SurfaceAreaGroup<T extends SurfaceAreaType> extends GroupableMembered<T, Applicational>
{
}

interface SurfaceArea<T extends SurfaceAreaType> extends Member<T>, Examinable
{
}

interface NetworkIngressType extends SurfaceAreaType
{
}

class NetworkIngress extends SurfaceArea<NetworkIngressType>
{
}

class NetworkIngressGroup extends SurfaceAreaGroup<NetworkIngressType>
{
}

interface NetworkEgressType extends SurfaceAreaType
{
}

class NetworkEgress extends SurfaceArea<NetworkEgressType>
{
}

class NetworkEgressGroup extends SurfaceAreaGroup<NetworkEgressType>
{
}

// DATA
interface DataType extends Groupable
{
}

interface Data<T extends DataType> extends Member<T>, Provable
{
	contains Snippet<? extends SnippetType>[] snippets opposite data
    @GenModel(propertyMultiLine="true") String data
}

interface DataGroup<T extends DataType> extends GroupableMembered<T, Applicational>
{
}

interface SnippetType
{
}

interface Snippet<T extends SnippetType> extends Provable
{
	container Data<? extends DataType> data opposite snippets
}

interface TextSnippetType extends SnippetType
{
}

class TextSnippet extends Snippet<TextSnippetType>
{
    int offset
    int length
    String text
}

class FileType extends DataType
{
}

class File extends Data<FileType>
{
	String fullPath
}

class FileGroup extends DataGroup<FileType>
{
}


class RequestType extends DataType
{
}

class Request extends Data<RequestType>
{
	refers Response[0..1] response opposite request
}

class RequestGroup extends DataGroup<RequestType>
{
}


class ResponseType extends DataType
{
}

class Response extends Data<ResponseType>
{
	refers Request[0..1] request opposite response
}

class ResponseGroup extends DataGroup<ResponseType>
{
}


// FLOW
interface FlowType extends Groupable
{
}

interface Flow<T extends FlowType> extends Member<T>, Traceable
{
    @GenModel(propertyMultiLine="true") String value
    contains FlowNode<? extends FlowType> flows opposite flowRoot
}

interface FlowGroup<T extends FlowType> extends GroupableMembered<T, Applicational>
{
}

interface FlowNode<T extends FlowType> extends Traceable
{
    container FlowNode<? extends FlowType> flowFrom opposite flowTo
    container Flow<? extends FlowType> flowRoot opposite flows
    contains FlowNode<? extends FlowType>[] flowTo opposite flowFrom
}

interface DataFlowType extends FlowType
{
}

class DataFlow extends Flow<DataFlowType>
{
    DataTaintType sourceType
}

class DataFlowNode extends FlowNode<DataFlowType>
{
}

class DataFlowGroup extends FlowGroup<DataFlowType>
{
}

enum DataTaintType
{
	HTTP
	HTTPS
	GENERIC_NETWORK
	FILE
	CONSOLE
	OTHER
}

interface DataFlowConstraint extends DataFlowType
{
}

class EndsWith extends FlowNode<DataFlowConstraint>
{
	String suffix
}

class StartsWith extends FlowNode<DataFlowConstraint>
{
	String prefix
}

class Matches extends FlowNode<DataFlowConstraint>
{
	String pattern
	MatcherRegex regexType
}

enum MatcherRegex
{
	JAVA,
	OTHER
}

class Contains extends FlowNode<DataFlowConstraint>
{
	String contents
}

class CastedTo extends FlowNode<DataFlowConstraint>
{
	String ^type
}


interface ControlFlowType extends FlowType
{
}

class ControlFlow extends Flow<ControlFlowType>
{
}

class ControlFlowNode extends FlowNode<ControlFlowType>
{
}

class ControlFlowGroup extends FlowGroup<ControlFlowType>
{
}

// ASSESSMENT
interface AssessmentType extends Groupable
{
}

interface Assessable extends Membered
{
}

interface Assessment<T extends AssessmentType> extends MemberedGroupable<T, Assessable>
{
	contains Property[] properties
}

interface AssessmentGroup<T extends AssessmentType> extends Group<T>
{
}

interface ApplicationAssessmentType extends AssessmentType
{
}

class ApplicationAssessment extends Assessment<ApplicationAssessmentType>
{
}

class ApplicationAssessmentGroup extends AssessmentGroup<ApplicationAssessmentType>
{
}

class Property
{
	String key
	String value
}

// APPLICATION
interface ApplicationType extends Groupable
{
}

interface Applicational extends Membered
{
}

interface Application<T extends ApplicationType> extends MemberedGroupable<T, Applicational>
{
}

interface ApplicationGroup<T extends ApplicationType> extends GroupableMembered<T, Assessable>
{
}

interface WebApplicationType extends ApplicationType
{
}

class WebApplication extends Application<WebApplicationType>
{
    String internalURL
    String externalURL
}

class WebApplicationGroup extends ApplicationGroup<WebApplicationType>
{
}

// SEARCH
interface SearchType extends Groupable
{
}

interface SearchGroup<T extends SearchType> extends GroupableMembered<T, Applicational>, Describable
{
	refers CWE[] searchResultCWEs
}

interface Search<T extends SearchType> extends Member<T>, Searchable
{
	contains SearchPattern<T> pattern
}

interface SearchPattern<T extends SearchType>
{
    String pattern
}

interface JavaSearchType extends SearchType
{
}

class JavaSearch extends Search<JavaSearchType>
{
}

class JavaSearchGroup extends SearchGroup<JavaSearchType>
{
}

class JavaSearchPattern extends SearchPattern<JavaSearchType>
{
	JavaSearchPatternType patternType
	JavaSearchFor searchFor
	JavaLimitTo limitTo
	JavaMatchRule matchRule
	JavaMatchCaseSensitivity caseSensitivity
}

enum JavaSearchPatternType
{
	Eclipse
}

enum JavaSearchFor
{
	ClassOrInterface,
	Class,
	Interface,
	Annotation,
	Method,
	Package
}

enum JavaLimitTo
{
	AnyOccurrences,
	Declaration,
	References,
	AnyExtendersOrImplementors
}

enum JavaMatchRule
{
	Wildcard,
	Exact
}

enum JavaMatchCaseSensitivity
{
	CaseInsensitive,
	CaseSensitive
}

// TASKS
interface TaskType extends Groupable
{
}

interface TaskGroup<T extends TaskType> extends GroupableMembered<T, Assessable>
{
}

interface Task<T extends TaskType> extends Member<T>, Taskable, Describable
{
    TaskStatus taskStatus
}

enum TaskStatus
{
    Todo,
    InProgress,
    Completed,
    Skipped
}

interface LocalTaskType extends TaskType
{
}

class LocalTaskGroup extends TaskGroup<LocalTaskType>
{
}

class LocalTask extends Task<LocalTaskType>
{
}

// FINDINGS
interface FindingType extends Groupable
{
}

interface FindingGroup<T extends FindingType> extends GroupableMembered<T, Assessable>
{
}

interface Finding<T extends FindingType> extends Member<T>, Findable, Describable
{
    @GenModel(propertyMultiLine="true") String details
    @GenModel(propertyMultiLine="true") String remediation
    @GenModel(propertyMultiLine="true") String reproducer
    @GenModel(propertyMultiLine="true") String references
}

interface LocalFindingType extends FindingType
{
}

class LocalFindingGroup extends FindingGroup<LocalFindingType>
{
}

class LocalFinding extends Finding<LocalFindingType>
{
}
