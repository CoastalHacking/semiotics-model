/**
 */
package us.coastalhacking.semiotics.model.assessment.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import us.coastalhacking.semiotics.model.assessment.util.AssessmentAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AssessmentItemProviderAdapterFactory extends AssessmentAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AssessmentItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.ControlGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlGroupItemProvider controlGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.ControlGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlGroupAdapter() {
		if (controlGroupItemProvider == null) {
			controlGroupItemProvider = new ControlGroupItemProvider(this);
		}

		return controlGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Control} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlItemProvider controlItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Control}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlAdapter() {
		if (controlItemProvider == null) {
			controlItemProvider = new ControlItemProvider(this);
		}

		return controlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.CWEGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CWEGroupItemProvider cweGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.CWEGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCWEGroupAdapter() {
		if (cweGroupItemProvider == null) {
			cweGroupItemProvider = new CWEGroupItemProvider(this);
		}

		return cweGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.CWE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CWEItemProvider cweItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.CWE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCWEAdapter() {
		if (cweItemProvider == null) {
			cweItemProvider = new CWEItemProvider(this);
		}

		return cweItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Data} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataItemProvider dataItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Data}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataAdapter() {
		if (dataItemProvider == null) {
			dataItemProvider = new DataItemProvider(this);
		}

		return dataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.DataGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataGroupItemProvider dataGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.DataGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataGroupAdapter() {
		if (dataGroupItemProvider == null) {
			dataGroupItemProvider = new DataGroupItemProvider(this);
		}

		return dataGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Snippet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SnippetItemProvider snippetItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Snippet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSnippetAdapter() {
		if (snippetItemProvider == null) {
			snippetItemProvider = new SnippetItemProvider(this);
		}

		return snippetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.File} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileItemProvider fileItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.File}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileAdapter() {
		if (fileItemProvider == null) {
			fileItemProvider = new FileItemProvider(this);
		}

		return fileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Request} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequestItemProvider requestItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Request}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequestAdapter() {
		if (requestItemProvider == null) {
			requestItemProvider = new RequestItemProvider(this);
		}

		return requestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Response} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponseItemProvider responseItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Response}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponseAdapter() {
		if (responseItemProvider == null) {
			responseItemProvider = new ResponseItemProvider(this);
		}

		return responseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Flow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowItemProvider flowItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Flow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowAdapter() {
		if (flowItemProvider == null) {
			flowItemProvider = new FlowItemProvider(this);
		}

		return flowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.FlowSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowSourceItemProvider flowSourceItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.FlowSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowSourceAdapter() {
		if (flowSourceItemProvider == null) {
			flowSourceItemProvider = new FlowSourceItemProvider(this);
		}

		return flowSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.FlowSink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowSinkItemProvider flowSinkItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.FlowSink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowSinkAdapter() {
		if (flowSinkItemProvider == null) {
			flowSinkItemProvider = new FlowSinkItemProvider(this);
		}

		return flowSinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.FlowGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowGroupItemProvider flowGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.FlowGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowGroupAdapter() {
		if (flowGroupItemProvider == null) {
			flowGroupItemProvider = new FlowGroupItemProvider(this);
		}

		return flowGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.DataFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFlowItemProvider dataFlowItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.DataFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFlowAdapter() {
		if (dataFlowItemProvider == null) {
			dataFlowItemProvider = new DataFlowItemProvider(this);
		}

		return dataFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.DataFlowSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFlowSourceItemProvider dataFlowSourceItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.DataFlowSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFlowSourceAdapter() {
		if (dataFlowSourceItemProvider == null) {
			dataFlowSourceItemProvider = new DataFlowSourceItemProvider(this);
		}

		return dataFlowSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.DataFlowSink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFlowSinkItemProvider dataFlowSinkItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.DataFlowSink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFlowSinkAdapter() {
		if (dataFlowSinkItemProvider == null) {
			dataFlowSinkItemProvider = new DataFlowSinkItemProvider(this);
		}

		return dataFlowSinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.FlowConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowConstraintItemProvider flowConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.FlowConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowConstraintAdapter() {
		if (flowConstraintItemProvider == null) {
			flowConstraintItemProvider = new FlowConstraintItemProvider(this);
		}

		return flowConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.EndsWith} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndsWithItemProvider endsWithItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.EndsWith}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndsWithAdapter() {
		if (endsWithItemProvider == null) {
			endsWithItemProvider = new EndsWithItemProvider(this);
		}

		return endsWithItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.StartsWith} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartsWithItemProvider startsWithItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.StartsWith}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartsWithAdapter() {
		if (startsWithItemProvider == null) {
			startsWithItemProvider = new StartsWithItemProvider(this);
		}

		return startsWithItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Matches} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchesItemProvider matchesItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Matches}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchesAdapter() {
		if (matchesItemProvider == null) {
			matchesItemProvider = new MatchesItemProvider(this);
		}

		return matchesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Contains} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainsItemProvider containsItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Contains}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainsAdapter() {
		if (containsItemProvider == null) {
			containsItemProvider = new ContainsItemProvider(this);
		}

		return containsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.CastedTo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CastedToItemProvider castedToItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.CastedTo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCastedToAdapter() {
		if (castedToItemProvider == null) {
			castedToItemProvider = new CastedToItemProvider(this);
		}

		return castedToItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.ControlFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowItemProvider controlFlowItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.ControlFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowAdapter() {
		if (controlFlowItemProvider == null) {
			controlFlowItemProvider = new ControlFlowItemProvider(this);
		}

		return controlFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.ControlFlowSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowSourceItemProvider controlFlowSourceItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.ControlFlowSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowSourceAdapter() {
		if (controlFlowSourceItemProvider == null) {
			controlFlowSourceItemProvider = new ControlFlowSourceItemProvider(this);
		}

		return controlFlowSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.ControlFlowSink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowSinkItemProvider controlFlowSinkItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.ControlFlowSink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowSinkAdapter() {
		if (controlFlowSinkItemProvider == null) {
			controlFlowSinkItemProvider = new ControlFlowSinkItemProvider(this);
		}

		return controlFlowSinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Assessment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssessmentItemProvider assessmentItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Assessment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssessmentAdapter() {
		if (assessmentItemProvider == null) {
			assessmentItemProvider = new AssessmentItemProvider(this);
		}

		return assessmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.ApplicationGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationGroupItemProvider applicationGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.ApplicationGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationGroupAdapter() {
		if (applicationGroupItemProvider == null) {
			applicationGroupItemProvider = new ApplicationGroupItemProvider(this);
		}

		return applicationGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Application} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationItemProvider applicationItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Application}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationAdapter() {
		if (applicationItemProvider == null) {
			applicationItemProvider = new ApplicationItemProvider(this);
		}

		return applicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.SearchGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SearchGroupItemProvider searchGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.SearchGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSearchGroupAdapter() {
		if (searchGroupItemProvider == null) {
			searchGroupItemProvider = new SearchGroupItemProvider(this);
		}

		return searchGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Search} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SearchItemProvider searchItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Search}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSearchAdapter() {
		if (searchItemProvider == null) {
			searchItemProvider = new SearchItemProvider(this);
		}

		return searchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.JavaSearchPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaSearchPatternItemProvider javaSearchPatternItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.JavaSearchPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaSearchPatternAdapter() {
		if (javaSearchPatternItemProvider == null) {
			javaSearchPatternItemProvider = new JavaSearchPatternItemProvider(this);
		}

		return javaSearchPatternItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (controlGroupItemProvider != null) controlGroupItemProvider.dispose();
		if (controlItemProvider != null) controlItemProvider.dispose();
		if (cweGroupItemProvider != null) cweGroupItemProvider.dispose();
		if (cweItemProvider != null) cweItemProvider.dispose();
		if (dataItemProvider != null) dataItemProvider.dispose();
		if (dataGroupItemProvider != null) dataGroupItemProvider.dispose();
		if (snippetItemProvider != null) snippetItemProvider.dispose();
		if (fileItemProvider != null) fileItemProvider.dispose();
		if (requestItemProvider != null) requestItemProvider.dispose();
		if (responseItemProvider != null) responseItemProvider.dispose();
		if (flowItemProvider != null) flowItemProvider.dispose();
		if (flowSourceItemProvider != null) flowSourceItemProvider.dispose();
		if (flowSinkItemProvider != null) flowSinkItemProvider.dispose();
		if (flowGroupItemProvider != null) flowGroupItemProvider.dispose();
		if (dataFlowItemProvider != null) dataFlowItemProvider.dispose();
		if (dataFlowSourceItemProvider != null) dataFlowSourceItemProvider.dispose();
		if (dataFlowSinkItemProvider != null) dataFlowSinkItemProvider.dispose();
		if (flowConstraintItemProvider != null) flowConstraintItemProvider.dispose();
		if (endsWithItemProvider != null) endsWithItemProvider.dispose();
		if (startsWithItemProvider != null) startsWithItemProvider.dispose();
		if (matchesItemProvider != null) matchesItemProvider.dispose();
		if (containsItemProvider != null) containsItemProvider.dispose();
		if (castedToItemProvider != null) castedToItemProvider.dispose();
		if (controlFlowItemProvider != null) controlFlowItemProvider.dispose();
		if (controlFlowSourceItemProvider != null) controlFlowSourceItemProvider.dispose();
		if (controlFlowSinkItemProvider != null) controlFlowSinkItemProvider.dispose();
		if (assessmentItemProvider != null) assessmentItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (applicationGroupItemProvider != null) applicationGroupItemProvider.dispose();
		if (applicationItemProvider != null) applicationItemProvider.dispose();
		if (searchGroupItemProvider != null) searchGroupItemProvider.dispose();
		if (searchItemProvider != null) searchItemProvider.dispose();
		if (javaSearchPatternItemProvider != null) javaSearchPatternItemProvider.dispose();
	}

}
