/**
 * Copyright (c) 2016 Coastal Hacking
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License
 * v1.0 which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package us.coastalhacking.semiotics.model.assessment.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import us.coastalhacking.semiotics.model.assessment.util.AssessmentAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AssessmentItemProviderAdapterFactory extends AssessmentAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AssessmentItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.CWEGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CWEGroupItemProvider cweGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.CWEGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCWEGroupAdapter() {
		if (cweGroupItemProvider == null) {
			cweGroupItemProvider = new CWEGroupItemProvider(this);
		}

		return cweGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.CWE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CWEItemProvider cweItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.CWE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCWEAdapter() {
		if (cweItemProvider == null) {
			cweItemProvider = new CWEItemProvider(this);
		}

		return cweItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Authentication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuthenticationItemProvider authenticationItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Authentication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuthenticationAdapter() {
		if (authenticationItemProvider == null) {
			authenticationItemProvider = new AuthenticationItemProvider(this);
		}

		return authenticationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.AuthenticationGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuthenticationGroupItemProvider authenticationGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.AuthenticationGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuthenticationGroupAdapter() {
		if (authenticationGroupItemProvider == null) {
			authenticationGroupItemProvider = new AuthenticationGroupItemProvider(this);
		}

		return authenticationGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Authorization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuthorizationItemProvider authorizationItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Authorization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuthorizationAdapter() {
		if (authorizationItemProvider == null) {
			authorizationItemProvider = new AuthorizationItemProvider(this);
		}

		return authorizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.AccountGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountGroupItemProvider accountGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.AccountGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountGroupAdapter() {
		if (accountGroupItemProvider == null) {
			accountGroupItemProvider = new AccountGroupItemProvider(this);
		}

		return accountGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Account} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountItemProvider accountItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Account}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountAdapter() {
		if (accountItemProvider == null) {
			accountItemProvider = new AccountItemProvider(this);
		}

		return accountItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.AuthorizationGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuthorizationGroupItemProvider authorizationGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.AuthorizationGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuthorizationGroupAdapter() {
		if (authorizationGroupItemProvider == null) {
			authorizationGroupItemProvider = new AuthorizationGroupItemProvider(this);
		}

		return authorizationGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Cryptography} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CryptographyItemProvider cryptographyItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Cryptography}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCryptographyAdapter() {
		if (cryptographyItemProvider == null) {
			cryptographyItemProvider = new CryptographyItemProvider(this);
		}

		return cryptographyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.OutputEncodingGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputEncodingGroupItemProvider outputEncodingGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.OutputEncodingGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputEncodingGroupAdapter() {
		if (outputEncodingGroupItemProvider == null) {
			outputEncodingGroupItemProvider = new OutputEncodingGroupItemProvider(this);
		}

		return outputEncodingGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.OutputEncoding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputEncodingItemProvider outputEncodingItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.OutputEncoding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputEncodingAdapter() {
		if (outputEncodingItemProvider == null) {
			outputEncodingItemProvider = new OutputEncodingItemProvider(this);
		}

		return outputEncodingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.CryptographyGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CryptographyGroupItemProvider cryptographyGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.CryptographyGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCryptographyGroupAdapter() {
		if (cryptographyGroupItemProvider == null) {
			cryptographyGroupItemProvider = new CryptographyGroupItemProvider(this);
		}

		return cryptographyGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.GenericControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericControlItemProvider genericControlItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.GenericControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericControlAdapter() {
		if (genericControlItemProvider == null) {
			genericControlItemProvider = new GenericControlItemProvider(this);
		}

		return genericControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.GenericControlGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericControlGroupItemProvider genericControlGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.GenericControlGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericControlGroupAdapter() {
		if (genericControlGroupItemProvider == null) {
			genericControlGroupItemProvider = new GenericControlGroupItemProvider(this);
		}

		return genericControlGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.NetworkIngress} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkIngressItemProvider networkIngressItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.NetworkIngress}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkIngressAdapter() {
		if (networkIngressItemProvider == null) {
			networkIngressItemProvider = new NetworkIngressItemProvider(this);
		}

		return networkIngressItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.NetworkIngressGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkIngressGroupItemProvider networkIngressGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.NetworkIngressGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkIngressGroupAdapter() {
		if (networkIngressGroupItemProvider == null) {
			networkIngressGroupItemProvider = new NetworkIngressGroupItemProvider(this);
		}

		return networkIngressGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.NetworkEgress} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkEgressItemProvider networkEgressItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.NetworkEgress}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkEgressAdapter() {
		if (networkEgressItemProvider == null) {
			networkEgressItemProvider = new NetworkEgressItemProvider(this);
		}

		return networkEgressItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.NetworkEgressGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkEgressGroupItemProvider networkEgressGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.NetworkEgressGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkEgressGroupAdapter() {
		if (networkEgressGroupItemProvider == null) {
			networkEgressGroupItemProvider = new NetworkEgressGroupItemProvider(this);
		}

		return networkEgressGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.TextSnippet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextSnippetItemProvider textSnippetItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.TextSnippet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextSnippetAdapter() {
		if (textSnippetItemProvider == null) {
			textSnippetItemProvider = new TextSnippetItemProvider(this);
		}

		return textSnippetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.FileType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileTypeItemProvider fileTypeItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.FileType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileTypeAdapter() {
		if (fileTypeItemProvider == null) {
			fileTypeItemProvider = new FileTypeItemProvider(this);
		}

		return fileTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.File} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileItemProvider fileItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.File}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileAdapter() {
		if (fileItemProvider == null) {
			fileItemProvider = new FileItemProvider(this);
		}

		return fileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.FileGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileGroupItemProvider fileGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.FileGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileGroupAdapter() {
		if (fileGroupItemProvider == null) {
			fileGroupItemProvider = new FileGroupItemProvider(this);
		}

		return fileGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.RequestType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequestTypeItemProvider requestTypeItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.RequestType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequestTypeAdapter() {
		if (requestTypeItemProvider == null) {
			requestTypeItemProvider = new RequestTypeItemProvider(this);
		}

		return requestTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Request} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequestItemProvider requestItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Request}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequestAdapter() {
		if (requestItemProvider == null) {
			requestItemProvider = new RequestItemProvider(this);
		}

		return requestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.RequestGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequestGroupItemProvider requestGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.RequestGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequestGroupAdapter() {
		if (requestGroupItemProvider == null) {
			requestGroupItemProvider = new RequestGroupItemProvider(this);
		}

		return requestGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.ResponseType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponseTypeItemProvider responseTypeItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.ResponseType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponseTypeAdapter() {
		if (responseTypeItemProvider == null) {
			responseTypeItemProvider = new ResponseTypeItemProvider(this);
		}

		return responseTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Response} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponseItemProvider responseItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Response}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponseAdapter() {
		if (responseItemProvider == null) {
			responseItemProvider = new ResponseItemProvider(this);
		}

		return responseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.ResponseGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponseGroupItemProvider responseGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.ResponseGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponseGroupAdapter() {
		if (responseGroupItemProvider == null) {
			responseGroupItemProvider = new ResponseGroupItemProvider(this);
		}

		return responseGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.DataFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFlowItemProvider dataFlowItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.DataFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFlowAdapter() {
		if (dataFlowItemProvider == null) {
			dataFlowItemProvider = new DataFlowItemProvider(this);
		}

		return dataFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.DataFlowNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFlowNodeItemProvider dataFlowNodeItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.DataFlowNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFlowNodeAdapter() {
		if (dataFlowNodeItemProvider == null) {
			dataFlowNodeItemProvider = new DataFlowNodeItemProvider(this);
		}

		return dataFlowNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.DataFlowGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFlowGroupItemProvider dataFlowGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.DataFlowGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFlowGroupAdapter() {
		if (dataFlowGroupItemProvider == null) {
			dataFlowGroupItemProvider = new DataFlowGroupItemProvider(this);
		}

		return dataFlowGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.EndsWith} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndsWithItemProvider endsWithItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.EndsWith}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndsWithAdapter() {
		if (endsWithItemProvider == null) {
			endsWithItemProvider = new EndsWithItemProvider(this);
		}

		return endsWithItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.StartsWith} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartsWithItemProvider startsWithItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.StartsWith}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartsWithAdapter() {
		if (startsWithItemProvider == null) {
			startsWithItemProvider = new StartsWithItemProvider(this);
		}

		return startsWithItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Matches} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchesItemProvider matchesItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Matches}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchesAdapter() {
		if (matchesItemProvider == null) {
			matchesItemProvider = new MatchesItemProvider(this);
		}

		return matchesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Contains} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainsItemProvider containsItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Contains}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainsAdapter() {
		if (containsItemProvider == null) {
			containsItemProvider = new ContainsItemProvider(this);
		}

		return containsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.CastedTo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CastedToItemProvider castedToItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.CastedTo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCastedToAdapter() {
		if (castedToItemProvider == null) {
			castedToItemProvider = new CastedToItemProvider(this);
		}

		return castedToItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.ControlFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowItemProvider controlFlowItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.ControlFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowAdapter() {
		if (controlFlowItemProvider == null) {
			controlFlowItemProvider = new ControlFlowItemProvider(this);
		}

		return controlFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.ControlFlowNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowNodeItemProvider controlFlowNodeItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.ControlFlowNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowNodeAdapter() {
		if (controlFlowNodeItemProvider == null) {
			controlFlowNodeItemProvider = new ControlFlowNodeItemProvider(this);
		}

		return controlFlowNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.ControlFlowGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowGroupItemProvider controlFlowGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.ControlFlowGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowGroupAdapter() {
		if (controlFlowGroupItemProvider == null) {
			controlFlowGroupItemProvider = new ControlFlowGroupItemProvider(this);
		}

		return controlFlowGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.ApplicationAssessment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationAssessmentItemProvider applicationAssessmentItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.ApplicationAssessment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationAssessmentAdapter() {
		if (applicationAssessmentItemProvider == null) {
			applicationAssessmentItemProvider = new ApplicationAssessmentItemProvider(this);
		}

		return applicationAssessmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.ApplicationAssessmentGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationAssessmentGroupItemProvider applicationAssessmentGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.ApplicationAssessmentGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationAssessmentGroupAdapter() {
		if (applicationAssessmentGroupItemProvider == null) {
			applicationAssessmentGroupItemProvider = new ApplicationAssessmentGroupItemProvider(this);
		}

		return applicationAssessmentGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.WebApplication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WebApplicationItemProvider webApplicationItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.WebApplication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWebApplicationAdapter() {
		if (webApplicationItemProvider == null) {
			webApplicationItemProvider = new WebApplicationItemProvider(this);
		}

		return webApplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.WebApplicationGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WebApplicationGroupItemProvider webApplicationGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.WebApplicationGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWebApplicationGroupAdapter() {
		if (webApplicationGroupItemProvider == null) {
			webApplicationGroupItemProvider = new WebApplicationGroupItemProvider(this);
		}

		return webApplicationGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.JavaSearch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaSearchItemProvider javaSearchItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.JavaSearch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaSearchAdapter() {
		if (javaSearchItemProvider == null) {
			javaSearchItemProvider = new JavaSearchItemProvider(this);
		}

		return javaSearchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.JavaSearchGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaSearchGroupItemProvider javaSearchGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.JavaSearchGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaSearchGroupAdapter() {
		if (javaSearchGroupItemProvider == null) {
			javaSearchGroupItemProvider = new JavaSearchGroupItemProvider(this);
		}

		return javaSearchGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.JavaSearchPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaSearchPatternItemProvider javaSearchPatternItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.JavaSearchPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaSearchPatternAdapter() {
		if (javaSearchPatternItemProvider == null) {
			javaSearchPatternItemProvider = new JavaSearchPatternItemProvider(this);
		}

		return javaSearchPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.LocalTaskGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalTaskGroupItemProvider localTaskGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.LocalTaskGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalTaskGroupAdapter() {
		if (localTaskGroupItemProvider == null) {
			localTaskGroupItemProvider = new LocalTaskGroupItemProvider(this);
		}

		return localTaskGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.LocalTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalTaskItemProvider localTaskItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.LocalTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalTaskAdapter() {
		if (localTaskItemProvider == null) {
			localTaskItemProvider = new LocalTaskItemProvider(this);
		}

		return localTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.LocalFindingGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalFindingGroupItemProvider localFindingGroupItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.LocalFindingGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalFindingGroupAdapter() {
		if (localFindingGroupItemProvider == null) {
			localFindingGroupItemProvider = new LocalFindingGroupItemProvider(this);
		}

		return localFindingGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link us.coastalhacking.semiotics.model.assessment.LocalFinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalFindingItemProvider localFindingItemProvider;

	/**
	 * This creates an adapter for a {@link us.coastalhacking.semiotics.model.assessment.LocalFinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalFindingAdapter() {
		if (localFindingItemProvider == null) {
			localFindingItemProvider = new LocalFindingItemProvider(this);
		}

		return localFindingItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (cweGroupItemProvider != null) cweGroupItemProvider.dispose();
		if (cweItemProvider != null) cweItemProvider.dispose();
		if (authenticationGroupItemProvider != null) authenticationGroupItemProvider.dispose();
		if (authenticationItemProvider != null) authenticationItemProvider.dispose();
		if (authorizationGroupItemProvider != null) authorizationGroupItemProvider.dispose();
		if (authorizationItemProvider != null) authorizationItemProvider.dispose();
		if (accountGroupItemProvider != null) accountGroupItemProvider.dispose();
		if (accountItemProvider != null) accountItemProvider.dispose();
		if (cryptographyGroupItemProvider != null) cryptographyGroupItemProvider.dispose();
		if (cryptographyItemProvider != null) cryptographyItemProvider.dispose();
		if (outputEncodingGroupItemProvider != null) outputEncodingGroupItemProvider.dispose();
		if (outputEncodingItemProvider != null) outputEncodingItemProvider.dispose();
		if (genericControlItemProvider != null) genericControlItemProvider.dispose();
		if (genericControlGroupItemProvider != null) genericControlGroupItemProvider.dispose();
		if (networkIngressItemProvider != null) networkIngressItemProvider.dispose();
		if (networkIngressGroupItemProvider != null) networkIngressGroupItemProvider.dispose();
		if (networkEgressItemProvider != null) networkEgressItemProvider.dispose();
		if (networkEgressGroupItemProvider != null) networkEgressGroupItemProvider.dispose();
		if (textSnippetItemProvider != null) textSnippetItemProvider.dispose();
		if (fileTypeItemProvider != null) fileTypeItemProvider.dispose();
		if (fileItemProvider != null) fileItemProvider.dispose();
		if (fileGroupItemProvider != null) fileGroupItemProvider.dispose();
		if (requestTypeItemProvider != null) requestTypeItemProvider.dispose();
		if (requestItemProvider != null) requestItemProvider.dispose();
		if (requestGroupItemProvider != null) requestGroupItemProvider.dispose();
		if (responseTypeItemProvider != null) responseTypeItemProvider.dispose();
		if (responseItemProvider != null) responseItemProvider.dispose();
		if (responseGroupItemProvider != null) responseGroupItemProvider.dispose();
		if (dataFlowItemProvider != null) dataFlowItemProvider.dispose();
		if (dataFlowNodeItemProvider != null) dataFlowNodeItemProvider.dispose();
		if (dataFlowGroupItemProvider != null) dataFlowGroupItemProvider.dispose();
		if (endsWithItemProvider != null) endsWithItemProvider.dispose();
		if (startsWithItemProvider != null) startsWithItemProvider.dispose();
		if (matchesItemProvider != null) matchesItemProvider.dispose();
		if (containsItemProvider != null) containsItemProvider.dispose();
		if (castedToItemProvider != null) castedToItemProvider.dispose();
		if (controlFlowItemProvider != null) controlFlowItemProvider.dispose();
		if (controlFlowNodeItemProvider != null) controlFlowNodeItemProvider.dispose();
		if (controlFlowGroupItemProvider != null) controlFlowGroupItemProvider.dispose();
		if (applicationAssessmentItemProvider != null) applicationAssessmentItemProvider.dispose();
		if (applicationAssessmentGroupItemProvider != null) applicationAssessmentGroupItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (webApplicationItemProvider != null) webApplicationItemProvider.dispose();
		if (webApplicationGroupItemProvider != null) webApplicationGroupItemProvider.dispose();
		if (javaSearchItemProvider != null) javaSearchItemProvider.dispose();
		if (javaSearchGroupItemProvider != null) javaSearchGroupItemProvider.dispose();
		if (javaSearchPatternItemProvider != null) javaSearchPatternItemProvider.dispose();
		if (localTaskGroupItemProvider != null) localTaskGroupItemProvider.dispose();
		if (localTaskItemProvider != null) localTaskItemProvider.dispose();
		if (localFindingGroupItemProvider != null) localFindingGroupItemProvider.dispose();
		if (localFindingItemProvider != null) localFindingItemProvider.dispose();
	}

}
